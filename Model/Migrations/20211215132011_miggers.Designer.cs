// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Configurations;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(PlaybookDBContext))]
    [Migration("20211215132011_miggers")]
    partial class miggers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Model.Entities.Abilities.AAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ABILITY_ID");

                    b.Property<string>("ABILITY_TYPE")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("CODE");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("DESCRIPTION");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ABILITIES_ST");

                    b.HasDiscriminator<string>("ABILITY_TYPE").HasValue("AAbility");
                });

            modelBuilder.Entity("Model.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AUTHOR_ID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("LAST_NAME");

                    b.HasKey("Id");

                    b.ToTable("AUTHORS");
                });

            modelBuilder.Entity("Model.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BOOK_ID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("TITLE");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("BOOKS");
                });

            modelBuilder.Entity("Model.Entities.BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BOOK_ID");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("AUTHOR_ID");

                    b.Property<string>("OccupationType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("OCCUPATION_TYPE");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BOOK_HAS_AUTHORS_JT");
                });

            modelBuilder.Entity("Model.Entities.Creatures.Creature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CREATURE_ID");

                    b.Property<int>("CombatSkill")
                        .HasColumnType("int")
                        .HasColumnName("COMBAT_SKILL");

                    b.Property<string>("CreatureType")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("CREATURE_TYPE");

                    b.Property<int>("Endurance")
                        .HasColumnType("int")
                        .HasColumnName("ENDURANCE");

                    b.HasKey("Id");

                    b.ToTable("CREATURES");
                });

            modelBuilder.Entity("Model.Entities.Events.AEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EVENT_ID");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("EVENT_TYPE");

                    b.HasKey("Id");

                    b.ToTable("EVENTS_BT");
                });

            modelBuilder.Entity("Model.Entities.Items.AItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ITEM_TYPE")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator<string>("ITEM_TYPE").HasValue("AItem");
                });

            modelBuilder.Entity("Model.Entities.Outcome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OUTCOME_ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("CONTENT");

                    b.Property<int>("RootSectionId")
                        .HasColumnType("int")
                        .HasColumnName("ROOT_SECTION_ID");

                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("SECTION_ID");

                    b.HasKey("Id");

                    b.HasIndex("RootSectionId");

                    b.HasIndex("SectionId");

                    b.ToTable("OUTCOMES_BT");
                });

            modelBuilder.Entity("Model.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SECTION_ID");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BOOK_ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("CONTENT");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("SECTIONS_BT");
                });

            modelBuilder.Entity("Model.Entities.Abilities.AnimalKinship", b =>
                {
                    b.HasBaseType("Model.Entities.Abilities.AAbility");

                    b.ToTable("ABILITIES_ST");

                    b.HasDiscriminator().HasValue("ANIMAL_KINSHIP");
                });

            modelBuilder.Entity("Model.Entities.Abilities.Camouflage", b =>
                {
                    b.HasBaseType("Model.Entities.Abilities.AAbility");

                    b.ToTable("ABILITIES_ST");

                    b.HasDiscriminator().HasValue("CAMOUFLAGE");
                });

            modelBuilder.Entity("Model.Entities.Abilities.Healing", b =>
                {
                    b.HasBaseType("Model.Entities.Abilities.AAbility");

                    b.ToTable("ABILITIES_ST");

                    b.HasDiscriminator().HasValue("HEALING");
                });

            modelBuilder.Entity("Model.Entities.Abilities.Hunting", b =>
                {
                    b.HasBaseType("Model.Entities.Abilities.AAbility");

                    b.ToTable("ABILITIES_ST");

                    b.HasDiscriminator().HasValue("HUNTING");
                });

            modelBuilder.Entity("Model.Entities.Abilities.Mindblast", b =>
                {
                    b.HasBaseType("Model.Entities.Abilities.AAbility");

                    b.ToTable("ABILITIES_ST");

                    b.HasDiscriminator().HasValue("MINDBLAST");
                });

            modelBuilder.Entity("Model.Entities.Abilities.MindOverMatter", b =>
                {
                    b.HasBaseType("Model.Entities.Abilities.AAbility");

                    b.ToTable("ABILITIES_ST");

                    b.HasDiscriminator().HasValue("MIND_OVER_MATTER");
                });

            modelBuilder.Entity("Model.Entities.Abilities.Mindshield", b =>
                {
                    b.HasBaseType("Model.Entities.Abilities.AAbility");

                    b.ToTable("ABILITIES_ST");

                    b.HasDiscriminator().HasValue("MINDSHIELD");
                });

            modelBuilder.Entity("Model.Entities.Abilities.SixthSense", b =>
                {
                    b.HasBaseType("Model.Entities.Abilities.AAbility");

                    b.ToTable("ABILITIES_ST");

                    b.HasDiscriminator().HasValue("SIXTH_SENSE");
                });

            modelBuilder.Entity("Model.Entities.Abilities.Tracking", b =>
                {
                    b.HasBaseType("Model.Entities.Abilities.AAbility");

                    b.ToTable("ABILITIES_ST");

                    b.HasDiscriminator().HasValue("TRACKING");
                });

            modelBuilder.Entity("Model.Entities.Abilities.Weaponskill", b =>
                {
                    b.HasBaseType("Model.Entities.Abilities.AAbility");

                    b.ToTable("ABILITIES_ST");

                    b.HasDiscriminator().HasValue("WEAPONSKILL");
                });

            modelBuilder.Entity("Model.Entities.Events.CombatEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.AEvent");

                    b.Property<int>("CreatureId")
                        .HasColumnType("int")
                        .HasColumnName("CREATURE_ID");

                    b.HasIndex("CreatureId");

                    b.ToTable("COMBAT_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.Events.ItemEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.AEvent");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.HasIndex("ItemId");

                    b.ToTable("ITEM_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.Events.MeetingEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.AEvent");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("TITLE");

                    b.ToTable("MEETING_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.Events.ValueEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.AEvent");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasColumnName("VALUE");

                    b.ToTable("VALUE_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.Items.Key", b =>
                {
                    b.HasBaseType("Model.Entities.Items.AItem");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("KEY");
                });

            modelBuilder.Entity("Model.Entities.Items.MagicalItem", b =>
                {
                    b.HasBaseType("Model.Entities.Items.AItem");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("MAGICAL_ITEM");
                });

            modelBuilder.Entity("Model.Entities.Items.Potion", b =>
                {
                    b.HasBaseType("Model.Entities.Items.AItem");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("POTION");
                });

            modelBuilder.Entity("Model.Entities.Items.Scroll", b =>
                {
                    b.HasBaseType("Model.Entities.Items.AItem");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("SCROLL");
                });

            modelBuilder.Entity("Model.Entities.Items.Ultility", b =>
                {
                    b.HasBaseType("Model.Entities.Items.AItem");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("UTILITY");
                });

            modelBuilder.Entity("Model.Entities.Items.Weapon", b =>
                {
                    b.HasBaseType("Model.Entities.Items.AItem");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("WEAPON");
                });

            modelBuilder.Entity("Model.Entities.RuleSection", b =>
                {
                    b.HasBaseType("Model.Entities.Section");

                    b.Property<string>("SectionType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("SECTION_TYPE");

                    b.ToTable("RULE_SECTIONS");
                });

            modelBuilder.Entity("Model.Entities.StorySection", b =>
                {
                    b.HasBaseType("Model.Entities.Section");

                    b.Property<int>("Nr")
                        .HasColumnType("int")
                        .HasColumnName("SECTION_NR");

                    b.ToTable("STORY_SECTIONS");
                });

            modelBuilder.Entity("Model.Entities.BookAuthor", b =>
                {
                    b.HasOne("Model.Entities.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Model.Entities.Outcome", b =>
                {
                    b.HasOne("Model.Entities.Section", "RootSection")
                        .WithMany()
                        .HasForeignKey("RootSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RootSection");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Model.Entities.Section", b =>
                {
                    b.HasOne("Model.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Model.Entities.Events.CombatEvent", b =>
                {
                    b.HasOne("Model.Entities.Creatures.Creature", "Creature")
                        .WithMany()
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Events.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.CombatEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("Model.Entities.Events.ItemEvent", b =>
                {
                    b.HasOne("Model.Entities.Events.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.ItemEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Items.AItem", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Model.Entities.Events.MeetingEvent", b =>
                {
                    b.HasOne("Model.Entities.Events.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.MeetingEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Events.ValueEvent", b =>
                {
                    b.HasOne("Model.Entities.Events.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.ValueEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.RuleSection", b =>
                {
                    b.HasOne("Model.Entities.Section", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.RuleSection", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.StorySection", b =>
                {
                    b.HasOne("Model.Entities.Section", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.StorySection", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
